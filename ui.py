#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.8.9
# In conjunction with Tcl version 8.6
#    Apr 16, 2017 12:57:03 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import ui_support
import main
import tkinter as tk
from tkinter import filedialog


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, top
    root = Tk()
    top = Sentimental_Analysis_on_Twitter_Feeds (root)
    ui_support.init(root, top)
    root.mainloop()

w = None
def create_Sentimental_Analysis_on_Twitter_Feeds(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Sentimental_Analysis_on_Twitter_Feeds (w)
    ui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Sentimental_Analysis_on_Twitter_Feeds():
    global w
    w.destroy()
    w = None

# def getFileName():
#     file_path = filedialog.askopenfilename(filetypes=(("Text Files","*.txt"),("All","*.*")))
#     return file_path

# def learnFromFileButton():
#     global top
#     file=getFileName()
#     pr("File : "+file+" is Selected")
#     main.learnFromFile(file)

# def getEntry(event):
#     global top,inpu
#     st=top.TEntry1.get()
#     inpu=st
#     if len(st)>0 :
#         pr("You inputed: "+ st)

#     top.TEntry1.delete(0, 'end')


# def pr(st):
#     global top
#     top.mylist.insert(END, st)

class Sentimental_Analysis_on_Twitter_Feeds:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x450+442+52")
        top.title("Sentimental Analysis on Twitter Feeds")
        top.configure(background="#d9d9d9")



        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.03, rely=0.2, relheight=0.7, relwidth=0.29)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(width=175)

        #self.Button1 = Button(self.Frame1, command = learnFromFileButton)
        self.Button1 = Button(self.Frame1, command = self.learnFromFileButton)
        self.Button1.place(relx=0.11, rely=0.1, height=24, width=127)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Learn From File''')
        self.Button1.configure(width=127)

        self.Button2 = Button(self.Frame1)
        self.Button2.place(relx=0.11, rely=0.25, height=24, width=127)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Learn From Tweets''')
        self.Button2.configure(width=127)

        self.Button3 = Button(self.Frame1,command = self.predictFromFileButton)
        self.Button3.place(relx=0.11, rely=0.41, height=24, width=127)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Predict From File''')
        self.Button3.configure(width=127)

        self.Button4 = Button(self.Frame1,command=self.predictFromTweetsButton)
        self.Button4.place(relx=0.11, rely=0.57, height=24, width=127)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Predict From Tweets''')
        self.Button4.configure(width=127)

        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.35, rely=0.2, relheight=0.7, relwidth=0.61)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(width=365)

        self.scrollbar = Scrollbar(self.Frame2)
        self.scrollbar.pack( side = RIGHT, fill=Y )

        self.mylist = Listbox(self.Frame2, yscrollcommand = self.scrollbar.set )
        self.mylist.insert(END, "log File:" )

        self.mylist.pack( side = LEFT, fill = BOTH )
        self.mylist.place(relx=0.03, rely=0.06, relheight=0.61, relwidth=0.93)
        self.mylist.configure(background="white")
        self.mylist.configure(foreground="black")

        # self.Log = ttk.Label(self.Frame2)
        # self.Log.place(relx=0.03, rely=0.06, relheight=0.61, relwidth=0.93)
        # self.Log.configure(background="white")
        # self.Log.configure(foreground="black")
        # self.Log.configure(relief=FLAT)
        # self.Log.configure(justify=LEFT)
        # self.Log.configure(text='''Log File''')
        # self.Log.configure(width=10)

        self.scrollbar.config( command = self.mylist.yview )



        #self.scrollb=Scrollbar(self.Frame2, orient="vertical")
        #self.scrollb.grid(row=1, column=1, sticky='nsew')  #grid scrollbar in master, but
        #self.Log.configure(yscrollcommand = self.scrollb.set  ) #attach scrollbar to frameTwo


        # self.log = tk.StringVar()
        # self.Scrolledtext1 = Entry(self.Frame2,textvariable=self.log,state='readonly')
        # self.myscroll = ttk.Scrollbar(self.Frame2, orient='vertical', command=self.Scrolledtext1.xview)
        # self.Scrolledtext1.config(xscrollcommand=self.myscroll.set)

        # self.Scrolledtext1.place(relx=0.03, rely=0.06, relheight=0.61
        #         , relwidth=0.93)
        # self.Scrolledtext1.configure(background="white")
        # self.Scrolledtext1.configure(font="TkTextFont")
        # self.Scrolledtext1.configure(foreground="black")
        # self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        # self.Scrolledtext1.configure(highlightcolor="black")
        # self.Scrolledtext1.configure(insertbackground="black")
        # self.Scrolledtext1.configure(insertborderwidth="3")
        # self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        # self.Scrolledtext1.configure(selectforeground="black")
        # self.Scrolledtext1.configure(width=10)
        # #self.Scrolledtext1.configure(wrap=NONE)
        #self.Scrolledtext1.configure(text="dxdjxdjkj")

        self.TEntry1 = ttk.Entry(self.Frame2)
        self.TEntry1.place(relx=0.03, rely=0.76, relheight=0.1, relwidth=0.92)
        self.TEntry1.configure(width=336)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")
        #self.TEntry1.bind('<Return>', getEntry)
        self.TEntry1.bind('<Return>', self.getEntry)

        self.Frame3 = Frame(top)
        self.Frame3.place(relx=0.03, rely=0.04, relheight=0.12, relwidth=0.93)
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(width=555)

        self.TLabel1 = ttk.Label(self.Frame3)
        self.TLabel1.place(relx=0.31, rely=0.18, height=29, width=206)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(justify=CENTER)
        self.TLabel1.configure(text='''Sentimental Analysis of Twitter Feeds''')
        self.TLabel1.configure(width=206)

        self.inpu=""

    def getFileName(self):
        file_path = filedialog.askopenfilename(filetypes=(("Text Files","*.txt"),("All","*.*")))
        return file_path

    def learnFromFileButton(self):
        #global top
        file=self.getFileName()
        self.pr("File : "+file+" is Selected")
        main.learnFromFile(file,self)

    def predictFromFileButton(self):
        #global top
        file=self.getFileName()
        self.pr("File : "+file+" is Selected")
        main.predictFromFile2(file,self)

    def predictFromTweetsButton(self):
        #global top
        #file=self.getFileName()
        #self.pr("File : "+file+" is Selected")
        main.predictFromTweets(self)

    def getEntry(self,event):
        #global top,inpu
        st=self.TEntry1.get()
        self.inpu=st
        if len(st)>0 :
            self.pr("You inputed: "+ st)

        self.TEntry1.delete(0, 'end')


    def pr(self,st):
        #global top
        try:
            self.mylist.insert(END, st)
        except:
            self.mylist.insert(END, "Error in string")


    @staticmethod
    def popup1(event):
        Popupmenu1 = Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="black")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(font="{Segoe UI} 9")
        Popupmenu1.configure(foreground="black")
        Popupmenu1.post(event.x_root, event.y_root)





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

#def init():
    #root = tk.Tk()
    #root.withdraw()

if __name__ == '__main__':
    vp_start_gui()
    #init()
    #main.learnFromFile("learn.txt")



